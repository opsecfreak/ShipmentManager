import { z } from "zod";
import { TaskSchema, CustomerSchema, ShipmentSchema, OrderSchema, ContactSchema, OrderItemSchema } from "./schemas.js";
export type Task = z.infer<typeof TaskSchema>;
export type Customer = z.infer<typeof CustomerSchema>;
export type Shipment = z.infer<typeof ShipmentSchema>;
export type Order = z.infer<typeof OrderSchema>;
export type Contact = z.infer<typeof ContactSchema>;
export type OrderItem = z.infer<typeof OrderItemSchema>;
export declare function validateTask(data: unknown): Promise<Task>;
export declare function validateCustomer(data: unknown): Promise<Customer>;
export declare function validateShipment(data: unknown): Promise<Shipment>;
export declare function validateOrder(data: unknown): Promise<Order>;
export declare function validateContact(data: unknown): Promise<Contact>;
export declare function validateOrderItem(data: unknown): Promise<OrderItem>;
export declare function safeCreateTask<T extends Omit<Task, "id" | "createdAt" | "updatedAt">>(data: T): Promise<{
    id: string;
    tags: string | null;
    createdAt: Date;
    updatedAt: Date;
    title: string;
    description: string | null;
    priority: string;
    status: string;
    dueDate: Date | null;
    assignedTo: string | null;
    customerId: string | null;
    shipmentId: string | null;
    orderId: string | null;
    estimatedHours: number | null;
    actualHours: number | null;
    completedAt: Date | null;
}>;
export declare function safeCreateCustomer<T extends Omit<Customer, "id" | "createdAt" | "updatedAt">>(data: T): Promise<{
    name: string;
    id: string;
    email: string;
    phone: string | null;
    company: string | null;
    address: string | null;
    city: string | null;
    state: string | null;
    zipCode: string | null;
    country: string;
    website: string | null;
    vatNumber: string | null;
    industry: string | null;
    tags: string | null;
    notes: string | null;
    createdAt: Date;
    updatedAt: Date;
}>;
export declare function safeCreateShipment<T extends Omit<Shipment, "id" | "createdAt" | "updatedAt">>(data: T): Promise<{
    id: string;
    notes: string | null;
    createdAt: Date;
    updatedAt: Date;
    status: string;
    customerId: string;
    trackingNumber: string;
    origin: string;
    destination: string;
    carrier: string;
    estimatedDelivery: Date | null;
    actualDelivery: Date | null;
    weight: number | null;
    dimensions: string | null;
    value: number | null;
    insurance: number | null;
}>;
export declare function safeCreateOrder<T extends Omit<Order, "id" | "createdAt" | "updatedAt">>(data: T): Promise<{
    id: string;
    notes: string | null;
    createdAt: Date;
    updatedAt: Date;
    status: string;
    dueDate: Date | null;
    customerId: string;
    orderNumber: string;
    orderDate: Date;
    totalAmount: number;
}>;
export declare function validateAndCreate<T, U extends z.ZodType<T>>(schema: U, data: any, createFn: (data: T) => Promise<any>): Promise<any>;
export declare function validateAndUpdate<T, U extends z.ZodType<Partial<T>>>(schema: U, id: string, data: any, updateFn: (id: string, data: Partial<T>) => Promise<any>): Promise<any>;
//# sourceMappingURL=validation.d.ts.map